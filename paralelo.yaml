blueprint:
  name: Paralelo Virtual (Ultra Rápido)
  description: Sincroniza switches/lights instantaneamente com proteção anti-loop e performance otimizada
  domain: automation
  input:
    entrada_switchs:
      name: Pontos de Iluminação
      description: Selecione os dispositivos para sincronizar
      selector:
        entity:
          domain:
            - switch
            - light
          multiple: true
    
    delay_ms:
      name: Delay de proteção (ms)
      description: Tempo mínimo entre execuções para evitar loops (0 = desativado)
      default: 50
      selector:
        number:
          min: 0
          max: 500
          step: 10
          unit_of_measurement: ms
          mode: slider

mode: single
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input entrada_switchs
    to:
      - 'on'
      - 'off'
    # Ignora mudanças de atributos, apenas estado
    not_from:
      - unavailable
      - unknown
    not_to:
      - unavailable
      - unknown

condition:
  # Condições combinadas para máxima eficiência
  - condition: and
    conditions:
      # Evita loops - verifica se não foi a própria automação
      - condition: template
        value_template: >
          {{ trigger.to_state.context.id != this.context.id
             and trigger.to_state.context.parent_id != this.context.id
             and trigger.to_state.context.user_id != this.context.user_id }}
      
      # Garante mudança real de estado
      - condition: template
        value_template: >
          {{ trigger.to_state.state != trigger.from_state.state }}
      
      # Proteção contra execuções muito rápidas (anti-bounce)
      - condition: template
        value_template: >
          {% set last_triggered = state_attr(this.entity_id, 'last_triggered') %}
          {% set delay = states('input_number.delay_ms') | default(50) | int %}
          {{ last_triggered is none or 
             (now() - last_triggered).total_seconds() * 1000 > delay }}

variables:
  entidades: !input entrada_switchs
  delay_ms: !input delay_ms
  # Pré-calcula lista de entidades para sincronizar
  outros: >
    {{ entidades | reject('equalto', trigger.entity_id) | list }}
  # Captura estado alvo para garantir consistência
  estado_alvo: "{{ trigger.to_state.state }}"

action:
  # Delay mínimo opcional para proteção extra
  - condition: template
    value_template: "{{ delay_ms | int > 0 }}"
  - delay:
      milliseconds: "{{ delay_ms | int }}"
  
  # Execução direta sem choose para máxima velocidade
  - service: "homeassistant.turn_{{ estado_alvo }}"
    data:
      # Força execução mesmo se já estiver no estado desejado
      entity_id: "{{ outros }}"
    continue_on_error: true
  
